#!/bin/bash

mygreen='\e[1;32m'
myblue='\e[1;36m'
myred='\e[1;31m'
myyellow='\e[1;93m'
myreset='\e[m'


find_git_branch() {
	local M=$(git branch 2> /dev/null | grep \* | sed '{s/*// ; s/ //}') 
	if [[ "$M" != "" ]]; then
		printf " ($M)" 
	else
		printf ""
	fi
}


git_dirty() {
	local STAT=$(git status -s 2> /dev/null)
	if [[ "$STAT" != "" ]]; then
		true
	else
		false	
	fi
}


battery_perc() {
	local BAT="$(cat /sys/class/power_supply/BAT0/charge_now 2> /dev/null)"
	local BATFULL="$(cat /sys/class/power_supply/BAT0/charge_full 2> /dev/null)"
	local BATPERC=0
	if [[ ! -z "$BAT" ]] && [[ ! -z "$BATFULL" ]]; then
		# (numerator + (denominator/2)) / denominator - rounding integer division
		BATPERC=$(( ( ($BAT * 100) + ($BATFULL / 2) ) / $BATFULL )) 
	fi
	local BATCOLOR=$mygreen
	local BATLEVEL="::::"
	if [[ $BATPERC -le 10 ]]; then
		BATCOLOR=$myred
		BATLEVEL=":   "
	elif [[ $BATPERC -le 50 ]]; then
		BATCOLOR=$myyellow
		BATLEVEL="::  "
	elif [[ $BATPERC -le 99 ]]; then
		BATLEVEL="::: "
	fi
	local color=0
	local ascii=0
	for option in "$@"; do
		case $option in
			--color) color=1;;
			--ascii) ascii=1;;
		esac
	done
	[[ $ascii -eq 1 ]] && BATPERC="[$BATLEVEL]+ $BATPERC%"
	[[ $color -eq 1 ]] && local fmt="$BATCOLOR%b$myreset\n" || fmt="%b\n"
	 printf $fmt "$BATPERC"
}







scheme_bar() (
	_nblanks() {
		printf ' %.0s' $(seq 1 $1)
	}

	_truncate() {
		local fmt="%.${2}s"
		printf $fmt "$1"
	}

	_fit() {
		local string=$2
		local maxlen=$3
		local cleanstring=$(echo -e "$string" | sed "s/$(echo -e "\e")[^m]*m//g")
		local padlen=$(( $maxlen - ${#cleanstring} ))
		case $1 in
			left)
				printf '%s' "$(_truncate "$string" $maxlen)"
				[[ $padlen -gt 0 ]] && _nblanks $padlen
			;;
			right)
				[[ $padlen -gt 0 ]] && _nblanks $padlen
				printf '%s' "$(_truncate "$string" $maxlen)"
			;;
			center)
				local halfpad=$(( $padlen / 2 ))
				[[ $padlen -gt 0 ]] && _nblanks $halfpad
				printf '%s' "$(_truncate "$string" $maxlen)"
				[[ $padlen -gt 0 ]] && _nblanks $halfpad
			;;
		esac
	}
	stty size | {
		read y x
		
		# $1 to the left of the screen
		local lft=$(echo -e "$1" | sed '/\n/d')
		local mid=$(echo -e "$2" | sed '/\n/d')
		local rgt=$(echo -e "$3" | sed '/\n/d')
		
		local trunc_len=$(( x / 3 ))
		local header=$(_fit left "$lft" $trunc_len)
		header=$header$(_fit center "$mid" $trunc_len)
		header=$header$(_fit right "$rgt" $trunc_len)

		tput sc
		tput cup 0 0		
		tput el  # clear line
		printf '%s' "$header"
		
		tput rc
	}
)


SCHEME_DATE_FMT="%a %b %d %Y %-I:%M %p %Z"

############## Boiler plate for a new scheme #############

#SCHEMEDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
#source $SCHEMEDIR/scheme_utils

#show_scheme_header() {
#	printf '%s' "$(scheme_bar "$HOSTNAME" "$(date +"$SCHEME_DATE_FMT")" "$(battery_perc --ascii --color)")"
#}

#alias clear='tput cup 1 0 && tput ed'

#PROMPT_COMMAND=show_scheme_header

#PS1='\u \['$myblue'\][\w]\['$myreset'\]$(if git_dirty; then printf "\[${myyellow}\]$(find_git_branch)"; else printf "\[$mygreen\]$(find_git_branch)";fi)\['$myreset'\] '




